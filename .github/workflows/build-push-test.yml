name: Build and publish container image

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: |
            ghcr.io/${GITHUB_REPOSITORY}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.sha }}

      - name: Hadolint Dockerfile Linter
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        with:
          dockerfile: Dockerfile
          format: tty
          no-fail: true
          failure-threshold: ignore
          # failure-threshold: error | warning | info #

      - name: Update Pull Request with Hadolint Report
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # - name: Kaniko build
      #   uses: aevea/action-kaniko@57fd639926c415a2fa4150ac72230eb5758ff48b
      #   with:
      #     image: tg-gcp-ci-tools-image
      #     registry: ghcr.io
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ github.event.pull_request.head.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3.0.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}          
          

  # testing:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/stv-io/tg-gcp-ci-tools-image/tg-gcp-ci-tools-image:${{ github.event.pull_request.head.sha }}
  #     credentials:
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.github_token }}

  #   steps:
  #     - name: test
  #       run: |
  #         export PATH=$PATH:/home/tfuser/bin:/home/tfuser/.local/bin:/home/tfuser/.local/gcloud/bin
  #         export 
  #         export TF_VERSION=1.4.4
  #         tfswitch
  #         export TG_VERSION=0.45.2          
  #         tgswitch
  #         alias tg='terragrunt'
  #         alias tf='terraform'
  #         # git config --global --add safe.directory '*' # still problematic!
  #         terraform version
  #         tf version
  #         terragrunt -v
  #         tg -v
  #         export CLOUDSDK_PYTHON=/usr/bin/python3          
  #         gcloud -v
  #         gpg --version
  #         unzip -v